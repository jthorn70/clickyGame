{"version":3,"sources":["gifs/dennis.jpg","gifs/mac.png","gifs/charile.jpg","gifs/danny.jpg","gifs/dee.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","clickedFriends","score","roundEnd","friends","gif","require","id","roundReset","_this$state","_this","setState","onClick","console","log","friendsSelected","temp","_this$state2","win","friendCount","length","includes","setTimeout","push","Math","floor","random","_this2","this","react_default","a","createElement","className","map","friend","src","key","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oJC+GzBC,oNA3GbC,MAAQ,CACNC,eAAgB,GAChBC,MAAO,EACPC,UAAU,EACVC,QAAS,CACP,CACEC,IAAKC,EAAQ,IACbC,GAAI,GAEN,CACEF,IAAKC,EAAQ,IACbC,GAAI,GAEN,CACEF,IAAKC,EAAQ,IACbC,GAAI,GAEN,CACEF,IAAKC,EAAQ,IACbC,GAAI,GAEN,CACEF,IAAKC,EAAQ,IACbC,GAAI,OAKVC,WAAa,WAAM,IAAAC,EACwBC,EAAKV,MAAxCC,EADWQ,EACXR,eADWQ,EACKP,MADLO,EACYN,SAE7BF,EAAiB,GAIjBS,EAAKC,SAAS,CACZV,iBACAC,MALM,EAMNC,UALS,OASbS,QAAU,SAAAL,GACRM,QAAQC,IAAI,qBADE,IAIVC,EACAC,EALUC,EAEyCP,EAAKV,MAAtDC,EAFQgB,EAERhB,eAAgBC,EAFRe,EAEQf,MAAOE,EAFfa,EAEeb,QAASD,EAFxBc,EAEwBd,SAAUe,EAFlCD,EAEkCC,IAC5CC,EAAcf,EAAQgB,OAsB1B,IAjBInB,EAAeoB,SAASd,IAC1BJ,GAAW,EACXmB,WAAWZ,EAAKF,WAAY,KAC5BK,QAAQC,IAAI,YACZb,EAAiB,GACjBC,EAAQ,IAERA,IACAD,EAAesB,KAAKhB,GAChBL,IAAUiB,IACZD,GAAM,EACNf,GAAW,IAMRgB,EAAc,GACnBJ,EAAkBS,KAAKC,MAAMD,KAAKE,SAAWP,GAE7CH,EAAQZ,IADRe,GAEAf,EAAQe,GAAef,EAAQW,GAC/BX,EAAQW,GAAmBC,EAI7BN,EAAKC,SAAS,CACZV,iBACAC,QACAE,UACAD,WACAe,QAGFjB,EAAesB,KAAKhB,4EAKb,IAAAoB,EAAAC,KAEP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAAA,wEACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXJ,KAAK5B,MAAMG,WAAayB,KAAK5B,MAAMkB,IAAQW,EAAAC,EAAAC,cAAA,sBAE5CH,KAAK5B,MAAMG,UAAYyB,KAAK5B,MAAMkB,IAAQW,EAAAC,EAAAC,cAAA,+BAE1CH,KAAK5B,MAAMI,QAAQ6B,IAAI,SAAAC,GAAM,OAAIL,EAAAC,EAAAC,cAAA,OAAKI,IAAMD,EAAO7B,IAAKO,QAAS,kBAAMe,EAAKf,QAAQsB,EAAO3B,KAAK6B,IAAKF,EAAO3B,GAAI8B,IAAI,mBArG7GC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAC,EAAAC,cAACe,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a13ffc1d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dennis.52ae2c3f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mac.8afcd52c.png\";","module.exports = __webpack_public_path__ + \"static/media/charile.52c8e0eb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/danny.00390432.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dee.d5796aa4.jpg\";","import React, { Component } from \"react\";\nimport \"./style.css\"\n\nclass App extends Component {\n  state = {\n    clickedFriends: [],\n    score: 0,\n    roundEnd: false,\n    friends: [\n      {\n        gif: require(\"./gifs/dennis.jpg\"),\n        id: 1\n      },\n      {\n        gif: require(\"./gifs/mac.png\"),\n        id: 2\n      },\n      {\n        gif: require(\"./gifs/charile.jpg\"),\n        id: 3\n      },\n      {\n        gif: require(\"./gifs/danny.jpg\"),\n        id: 4\n      },\n      {\n        gif: require(\"./gifs/dee.jpg\"),\n        id: 5\n      },\n    ]\n  };\n\n  roundReset = () => {\n    let { clickedFriends, score, roundEnd} = this.state\n    \n    clickedFriends = []\n    score = 0\n    roundEnd = false\n\n    this.setState({\n      clickedFriends,\n      score,\n      roundEnd\n    })\n  }\n\n  onClick = id => {\n    console.log(\"ive been clicked!\");\n    let { clickedFriends, score, friends, roundEnd, win} = this.state;\n    let friendCount = friends.length;\n    let friendsSelected;\n    let temp;\n\n\n    if (clickedFriends.includes(id)) {\n      roundEnd = true;\n      setTimeout(this.roundReset, 2000)\n      console.log(\"you lost\");\n      clickedFriends = [];\n      score = 0;\n    } else {\n      score++;\n      clickedFriends.push(id);\n      if (score === friendCount) {\n        win = true;\n        roundEnd = true;\n      }\n    }\n\n  \n\n    while (friendCount > 0) {\n      friendsSelected = Math.floor(Math.random() * friendCount);\n      friendCount--;\n      temp  = friends[friendCount];\n      friends[friendCount] = friends[friendsSelected];\n      friends[friendsSelected] = temp;\n\n    }\n\n    this.setState({\n      clickedFriends,\n      score,\n      friends,\n      roundEnd,\n      win\n    });\n\n    clickedFriends.push(id);\n  };\n\n\n\n  render() {\n    // const images = [];\n    return (\n      <div className=\"App\">\n        <h1>cLiCkY FrIeNdS</h1>\n        <p>Click all the friends, with no duplicates, to win the game!</p>\n        <div className=\"friend-zone\">\n          {(this.state.roundEnd && !this.state.win) ? (<h1>You Lose</h1>)\n          :\n          (this.state.roundEnd && this.state.win) ? (<h1>Congratz, you win</h1>)\n          :\n          (this.state.friends.map(friend => <img src ={friend.gif} onClick={() => this.onClick(friend.id)} key={friend.id} alt=\"idk\" /> ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}